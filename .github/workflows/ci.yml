#name: CI/CD - Build, Test & Deploy Spring Boot
#
#on:
#  push:
#    branches:
#      - main  # Workflow sẽ chạy khi có code được đẩy lên nhánh `main`
#
#jobs:
#  test:
#    runs-on: ubuntu-latest  # Chạy workflow trên môi trường Ubuntu mới nhất
#    services:
#      mysql:
#        image: mysql:8  # Khởi chạy một container MySQL 8
#        env:
#          MYSQL_DATABASE: webtourism  # Tạo database có tên `webtourism`
#          MYSQL_ROOT_PASSWORD: luanml001  # Đặt mật khẩu root (Lưu ý: Nên dùng GitHub Secrets thay vì để lộ trực tiếp)
#        ports:
#          - 3306:3306  # Mở cổng 3306 để Spring Boot có thể kết nối với MySQL
#        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=5s --health-timeout=5s --health-retries=40
#        # Kiểm tra sức khỏe của MySQL, thử kết nối trong 40 lần với khoảng cách 5 giây
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3  # Lấy code từ repository về môi trường runner
#
#      - name: Setup JDK 17
#        uses: actions/setup-java@v3  # Cài đặt Java JDK 17
#        with:
#          java-version: '17'
#          distribution: 'temurin'  # Dùng Temurin JDK (phiên bản OpenJDK được bảo trì tốt)
#
#      - name: Run Tests
#        run: mvn test  # Chạy bộ test của Maven để kiểm tra code
#
#      - name: Debug Surefire Test Reports
#        if: failure()  # Nếu bước `mvn test` thất bại, in ra log test từ Surefire
#        run: cat target/surefire-reports/*.txt || true
#
#


name: CI/CD - Build, Test & Deploy Spring Boot

on:
  workflow_dispatch:  # Chạy thủ công từ GitHub Actions tab

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Maven
        run: mvn clean package -DskipTests

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
        
      - name: Test SSH connection
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "hostname"

      - name: Deploy .jar to server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          echo "Uploading to $REMOTE_USER@$REMOTE_HOST:$REMOTE_DIR"
          ls -l target
          JAR_FILE=$(ls target/*.jar | head -n1)
          echo "Found JAR: $JAR_FILE"
      
          # debug thử SSH có thấy thư mục không
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -ld $REMOTE_DIR || mkdir -p $REMOTE_DIR"
      
          # CHẠY SCP VỚI DEBUG
          sshpass -v -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no "$JAR_FILE" $REMOTE_USER@$REMOTE_HOST:$REMOTE_DIR
          # Stop app đang chạy (nếu có)
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "pkill -f 'java -jar' || true"
          
          # Đợi 2s rồi chạy lại app
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "
            sleep 2
            JAR_PATH=\$(ls $REMOTE_DIR/*.jar | head -n1)
            nohup java -jar \$JAR_PATH > $REMOTE_DIR/app.log 2>&1 &
          "

